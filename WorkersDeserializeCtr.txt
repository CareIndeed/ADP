public class WorkersDeserializeCtr {
    
  
    public  PageReference  deserialize(){
         
        String accessToken = CareIndeedWebServiceHelper.getAccessToken();
	    String endpoint = 'https://api.adp.com/hr/v2/workers?';
	    Http http = new Http();
	    HttpRequest req = new HttpRequest();
	    HttpResponse res = new HttpResponse();
	    List<Care_Indeed_Contact__c> carelist = new List<Care_Indeed_Contact__c>();
        integer recCount = 1;
        do {
	        req.setMethod('GET');
	        req.setHeader('Authorization', 'Bearer '+accessToken);
            String endPointSkip = String.valueOf(recCount * 100 - 100);
	        req.setEndpoint(endpoint + '$top=100&$skip=' + endPointSkip );
            recCount++;
            System.debug('@@@@@@EndPoint@@@@@' + req.getEndpoint());
	        req.setTimeout(120000);
	        
	        res = http.send(req);
	        String responsebody = res.getBody();
	        System.debug('@@@@@@@@@@responsebody@@@'+responsebody);
	         
		    map<String, Object> wklist = (map<String, Object>) JSON.deserializeUntyped(responsebody);
			System.debug('@@@@@@wkj@@@@@'+wklist);
		 
	
			
			id rectypeid = Schema.SObjectType.Care_Indeed_Contact__c.getRecordTypeInfosByName().get('Worker').getRecordTypeId();
			List<Object> worker = (List<Object>)wklist.get('workers');

			for(Object cls: worker){
			    Map<String, Object> workerdata = (Map<String, Object>)cls;
			    System.debug('@@@Vworkerdata@@@@@@'+workerdata);

			    	Care_Indeed_Contact__c care = new Care_Indeed_Contact__c();
			        care.ADP_Associate_OID__c = (String)workerdata.get('associateOID');
			        care.recordtypeid = rectypeid;
			 
			        Map<String, Object> workerID = (Map<String, Object>)workerdata.get('workerID');
            	    care.ADP_Worker_ID__c = (String)workerID.get('idValue');
                
                	Map<String, Object> workerDatesdata  = (Map<String, Object>)workerdata.get('workerDates');
	                String dt = (String)workerDatesdata.get('originalHireDate');
                    
	                if(dt!=null){
    		            String caredate = dt.substring(8,10)+'/'+dt.substring(5,7) +'/' +dt.substring(0,4);
            		    care.Hire_Date__c = Date.parse(caredate);
                	}
	                String dt1 = (String)workerDatesdata.get('terminationDate');
                
    	            if(dt1!=null){
        		        String caredate1 = dt1.substring(8,10)+'/'+dt1.substring(5,7) +'/' +dt1.substring(0,4);
                		care.Termination_Date__c = Date.parse(caredate1);
	                }

    	            Map<String, Object> workerStatusdata  = (Map<String, Object>)workerdata.get('workerStatus');
        	        Map<String, Object> statusCodedata  = (Map<String, Object>)workerStatusdata.get('statusCode');
					care.Worker_Status_Code_name__c = (String)statusCodedata.get('codeValue');
					
					
					List<Object> workAssignmentslist = (List<Object>)workerdata.get('workAssignments');
                    if(workAssignmentslist!=null){
							for(Object work: workAssignmentslist){
							    if(work!=null){
								Map<String, Object> workobjAccount= (Map<String, Object>)work;
								if(workobjAccount!=null){
								Map<String, Object> homeWorkLocationdata = (Map<String, Object>)workobjAccount.get('homeWorkLocation');
								    if(homeWorkLocationdata!=null){
								        care.Birth_Country_Code__c = (String)homeWorkLocationdata.get('countryCode');
    									care.Birth_Postal_Code__c = (String)homeWorkLocationdata.get('postalCode');
								        Map<String, Object> addressdata = (Map<String, Object>)homeWorkLocationdata.get('address');
    									care.Birth_City__c = (String)addressdata.get('cityName');
								         }
							    	}
							     }
							}
						}
					
                
					Map<String, Object> persondata = (Map<String, Object>)workerdata.get('person');
		         
					List<Object> governmentIDslist = (List<Object>)persondata.get('governmentIDs');			
		         	
		         	System.debug('%%%%%%%governmentIDslist%%%%%%'+governmentIDslist);
		         	
		         	if(governmentIDslist!=null)
		         		for(Object objAccount1: governmentIDslist){
		             		if(objAccount1!=null){
								Map<String, Object> objAccount2= (Map<String, Object>)objAccount1;
		    		            care.ADP_PersonOID__c = (String)objAccount2.get('idValue');
    		             		care.ADP_Applicant_ID__c = (String)objAccount2.get('itemID');
		             		}
		         		}

		         		Map<String, Object> genderCodedata  = (Map<String, Object>)persondata.get('genderCode');
		         		care.Gender__c = (String)genderCodedata.get('shortName');
		         		care.Gender_Identity_Code_Name__c = (String)genderCodedata.get('codeValue');
		         
                 		Map<String, Object> legalName  = (Map<String, Object>)persondata.get('legalName');
		         		care.Name = (String)legalName.get('formattedName');

		        		String dt2 = (String)persondata.get('birthDate');
		        		String modifiedDate;
		        		if(dt2.substring(0,4) == '0000'){
		        		    modifiedDate = dt2.substring(8,10)+'/'+dt2.substring(5,7) +'/1900';
                			
                			
		        		}else{
		        		    modifiedDate = dt2.substring(8,10)+'/'+dt2.substring(5,7) +'/' +dt2.substring(0,4);
		        		}
		        		care.Birth_Date__c = Date.parse(modifiedDate);
		        
                		Map<String, Object> legalAddressdata  = (Map<String, Object>)persondata.get('legalAddress');
                		if(legalAddressdata!=null){
                			care.Legal_Mailing_Address__c = (String)legalAddressdata.get('lineOne')+','+(String)legalAddressdata.get('cityName')+','+(String)legalAddressdata.get('countryCode')+','+(String)legalAddressdata.get('postalCode');
                		}
                
                    	Map<String, Object> maritalStatusCodedata  = (Map<String, Object>)persondata.get('maritalStatusCode');
                		if(maritalStatusCodedata!=null){
		        			care.Maritial_Status_Code_Name__c = (String)maritalStatusCodedata.get('codeValue');
                		}
        		        
        		        Map<String, Object> communicationdata  = (Map<String, Object>)persondata.get('communication');
        		        if(communicationdata!=null){
        		        List<Object> landlineslist = (List<Object>)communicationdata.get('landlines');
						if(landlineslist!=null){
							for(Object landline: landlineslist){
							    if(landline!=null){
								Map<String, Object> landobjAccount= (Map<String, Object>)landline;
								care.Phone__c = (String)landobjAccount.get('formattedNumber');
							    }
							}
						}
						List<Object> emailslist = (List<Object>)communicationdata.get('emails');
						if(emailslist!=null){
							for(Object mail: emailslist){
							    if(mail!=null){
								Map<String, Object> emailobjAccount= (Map<String, Object>)mail;
								care.Email__c = (String)emailobjAccount.get('emailUri');
							    }
							}
						}
						
						List<Object> mobileslist = (List<Object>)communicationdata.get('mobiles');
						if(mobileslist!=null){
							for(Object mobile: mobileslist){
							    if(mobile!=null){
								Map<String, Object> mobileobjAccount= (Map<String, Object>)mobile;
								care.Mobile__c = (String)mobileobjAccount.get('formattedNumber');
							    }
							}
						}
						
		    	    }
		    	    if(persondata!=null){
		    	        care.Tobacco_User__c = String.valueOf(persondata.get('tobaccoUserIndicator'));
		    	        
		    	        Map<String, Object> raceCodedata = (Map<String, Object>)persondata.get('raceCode');
		    	        if(raceCodedata!=null){
		    	            care.Race_Code_Name__c = (String)raceCodedata.get('shortName');
		    	        }
		    	        
		    	    }
		    	    
                
            			carelist.add(care);
		    	
			
			     
		    	}
		    	recCount = recCount+1;
		   } 
        		 while (recCount < 17);
                
                 upsert carelist ADP_Associate_OID__c;
	             return null;
	}
}